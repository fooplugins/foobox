{"version":3,"file":"foobox.ready.js","mappings":";;;;;;;;;;;;;AAA4C;AACH;AAEA;AAEzC,MAAMG,IAAI,GAAGD,uDAAS,CAAE,aAAa,CAAE;AACvCF,2DAAQ,EAAE,CAACI,IAAI,CAAC,MAAKH,8DAAW,CAAEK,qBAAM,CAACC,MAAM,CAAE,CAAC,CAACH,IAAI,CAAE,MAAMD,IAAI,CAACK,GAAG,EAAE,CAAE;;;;;;;;;;;;;;;ACNzC;AAClC,IAAIE,OAAO,GAAG,IAAI;AAClB;AACA;AACA;AACA;AACA,SAASV,QAAQA,CAAA,EAAE;EACf,IAAI,CAACS,iDAAS,CAACC,OAAO,CAAC,EAAC;IACpBA,OAAO,GAAG,IAAIC,OAAO,CAAEC,QAAQ,IAAK;MAChCC,UAAU,CAAC,MAAI;QACX,IAAIC,QAAQ,CAACC,UAAU,KAAK,SAAS,EAAEH,QAAQ,EAAE,CAAC,KAC7CE,QAAQ,CAACE,gBAAgB,CAAC,kBAAkB,EAAEJ,QAAQ,EAAE,KAAK,CAAC;MACvE,CAAC,EAAE,CAAC,CAAC;IACT,CAAC,CAAC;EACN;EACA,OAAOF,OAAO;AAClB;AAEA,iEAAeV,QAAQ;;;;;;;;;;;;;;AClBvB,MAAMiB,KAAK,GAAGA,CAACC,KAAK,EAAEC,MAAM,GAAG,CAAC,KAAM,UAASD,KAAM,iBAAiB,GAAG,GAAG,CAAC,GAAIC,MAAO,0CAAyC;AACjI,MAAMC,KAAK,GAAGA,CAACF,KAAK,EAAEG,eAAe,KAAM,iCAAgCH,KAAM,uBAAsBG,eAAgB,4DAA2D;AAClL,MAAMC,IAAI,GAAGA,CAACC,KAAK,EAAEf,GAAG,KAAK;EACzB,MAAMgB,KAAK,GAAGhB,GAAG,GAAGe,KAAK;IACrBL,KAAK,GAAGM,KAAK,GAAG,EAAE,GAAG,KAAK,GAAIA,KAAK,GAAG,EAAE,GAAG,YAAY,GAAG,OAAQ;EACtE,OAAO;IAAEA,KAAK;IAAEN;EAAM,CAAC;AAC3B,CAAC;AAEc,SAASK,KAAKA,CAACE,IAAI,EAAC;EAC/B,MAAMC,SAAS,GAAGC,WAAW,CAACC,GAAG,EAAE;EACnC,MAAMC,WAAW,GAAI,UAASJ,IAAK,EAAC;EACpCK,OAAO,CAACC,KAAK,CAACF,WAAW,EAAEZ,KAAK,CAAC,OAAO,CAAC,EAAEG,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;EAClE,OAAO;IACHZ,GAAG,EAAEA,CAAA,KAAM;MACP,MAAMwB,QAAQ,GAAGV,IAAI,CAACI,SAAS,EAAEC,WAAW,CAACC,GAAG,EAAE,CAAC;MACnD,MAAMK,SAAS,GAAI,UAASR,IAAK,KAAIO,QAAQ,CAACR,KAAK,CAACU,OAAO,CAAC,CAAC,CAAE,IAAG;MAClEJ,OAAO,CAACC,KAAK,CAACE,SAAS,EAAEhB,KAAK,CAAC,KAAK,CAAC,EAAEG,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,EAAEA,KAAK,CAAC,OAAO,EAAEY,QAAQ,CAACd,KAAK,CAAC,CAAC;IAClG;EACJ,CAAC;AACL;AAAC","sources":["webpack://foobox/./src/public/foobox.ready/index.pro.js","webpack://foobox/./src/utils/domReady.js","webpack://foobox/./src/utils/task.js"],"sourcesContent":["import domReady from \"../../utils/domReady\";\r\nimport FooBox from \"../foobox/index.pro\";\r\n\r\nimport startTask from \"../../utils/task\";\r\n\r\nconst task = startTask( 'FooBox:init' );\r\ndomReady().then(()=> FooBox.init( global.FOOBOX )).then( () => task.end() );\r\n","import {isPromise} from \"./is.js\";\r\nlet promise = null;\r\n/**\r\n * Returns a promise that is resolved once the DOMContentLoaded event has been fired. Multiple calls to this method will return the same promise.\r\n * @returns {Promise}\r\n */\r\nfunction domReady(){\r\n    if (!isPromise(promise)){\r\n        promise = new Promise((resolved) => {\r\n            setTimeout(()=>{\r\n                if (document.readyState !== \"loading\") resolved();\r\n                else document.addEventListener('DOMContentLoaded', resolved, false);\r\n            }, 0);\r\n        });\r\n    }\r\n    return promise;\r\n}\r\n\r\nexport default domReady;","const arrow = (color, indent = 0) => `color: ${color}; text-indent:${(0.4 * 4) * indent}em; padding: 0.4em; margin-right: 0.4em;`;\r\nconst style = (color, backgroundColor) => `display: inline-block; color: ${color}; background-color: ${backgroundColor}; border-radius: 3px; padding: 0.4em; margin-right: 0.4em;`;\r\nconst diff = (start, end) => {\r\n    const value = end - start,\r\n        color = value > 50 ? \"red\" : (value > 25 ? \"darkorange\" : \"green\");\r\n    return { value, color };\r\n};\r\n\r\nexport default function start(name){\r\n    const startTime = performance.now();\r\n    const startFormat = `%c-->%c${name}`;\r\n    console.debug(startFormat, arrow('green'), style(\"gray\", \"white\"));\r\n    return {\r\n        end: () => {\r\n            const duration = diff(startTime, performance.now());\r\n            const endFormat = `%c<--%c${name}%c${duration.value.toFixed(2)}ms`;\r\n            console.debug(endFormat, arrow('red'), style(\"gray\", \"white\"), style(\"white\", duration.color));\r\n        }\r\n    };\r\n};"],"names":["domReady","FooBox","startTask","task","then","init","global","FOOBOX","end","isPromise","promise","Promise","resolved","setTimeout","document","readyState","addEventListener","arrow","color","indent","style","backgroundColor","diff","start","value","name","startTime","performance","now","startFormat","console","debug","duration","endFormat","toFixed"],"sourceRoot":""}